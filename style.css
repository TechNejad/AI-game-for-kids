:root {
  /* Dramatic palette for an immersive experience */
  --background: #0a192f;
  --foreground: #ccd6f6;
  --accent: #64ffda;
  --accent-hover: #4db7a9;
  --card-background: #112240;
  --border-radius: 8px;
  --transition-duration: 0.6s;

  /* Additional colours for highlights and alerts */
  --alert: #ff6b6b;

  /* Path to the starry background image.  We reference it in the
     body::before pseudo-element to create a moving cosmic backdrop. */
  --space-bg: url('assets/space_background.png');
}

* {
  box-sizing: border-box;
}

body {
  margin: 0;
  padding: 0;
  background: var(--background);
  color: var(--foreground);
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,
    Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  line-height: 1.6;
  transition: background 0.3s ease, color 0.3s ease;
}

/* Cosmic moving backdrop.  We use a pseudo-element so that the
   background image can move independently of the page content.
   The image itself is specified via the --space-bg variable defined
   above.  The animation slowly pans the background to give a sense of
   drifting through space. */
body::before {
  content: '';
  position: fixed;
  top: 0;
  left: 0;
  width: 200vw;
  height: 200vh;
  background-image: var(--space-bg);
  background-size: cover;
  background-repeat: repeat;
  opacity: 0.25;
  z-index: -1;
  animation: move-space 60s linear infinite;
}

@keyframes move-space {
  0% {
    transform: translate(0, 0);
  }
  100% {
    transform: translate(-50vw, -50vh);
  }
}

h1, h2, h3, h4, h5 {
  font-weight: 600;
  line-height: 1.2;
  margin: 0 0 0.5rem;
}

p {
  margin: 0 0 1rem;
}

.hidden {
  display: none;
}

/* Screen container */
.screen {
  padding: 3rem 1rem;
  max-width: 960px;
  margin: 0 auto;
}

/* Hero section */
.hero {
  text-align: center;
  margin-top: 4rem;
}

.hero h1 {
  font-size: 3rem;
  line-height: 1.2;
  margin-bottom: 1.5rem;
}

.hero button {
  background: var(--accent);
  color: var(--background);
  border: none;
  padding: 0.85rem 1.75rem;
  border-radius: var(--border-radius);
  font-size: 1.1rem;
  cursor: pointer;
  font-weight: 600;
  transition: background 0.2s ease, color 0.2s ease;
}

.hero button:hover {
  background: var(--accent-hover);
  color: var(--background);
}

/* Prompt selection */
.prompt-list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin-top: 2rem;
  max-width: 600px;
  margin-left: auto;
  margin-right: auto;
}

.prompt-item {
  background: var(--card-background);
  border: 1px solid var(--accent);
  border-radius: var(--border-radius);
  padding: 0.85rem 1rem;
  cursor: pointer;
  transition: background 0.2s ease, color 0.2s ease;
}

.prompt-item:hover {
  background: var(--accent);
  color: var(--background);
}

/* Custom prompt section for user-defined questions */
.custom-prompt {
  margin-top: 2rem;
  text-align: center;
}
.custom-prompt input {
  width: 80%;
  max-width: 500px;
  padding: 0.75rem 1rem;
  border-radius: var(--border-radius);
  border: 1px solid var(--accent);
  background: var(--card-background);
  color: var(--foreground);
  font-size: 1rem;
  margin-bottom: 1rem;
}
.custom-prompt input:focus {
  outline: none;
  border-color: var(--accent-hover);
}
.custom-prompt button {
  background: var(--accent);
  color: var(--background);
  border: none;
  padding: 0.8rem 1.6rem;
  border-radius: var(--border-radius);
  font-size: 1rem;
  cursor: pointer;
  font-weight: 600;
  transition: background 0.2s ease, color 0.2s ease;
}
.custom-prompt button:hover {
  background: var(--accent-hover);
  color: var(--background);
}

/* Tagline on the responses page */
/* The tagline at the top of the responses page sets the tone for what
   follows.  We enlarge it and add generous margins so it commands
   attention. */
.tagline {
  text-align: center;
  font-size: 1.8rem;
  color: var(--accent);
  margin-top: 1rem;
  margin-bottom: 2rem;
  font-weight: 700;
}

/* When the system prompts have been revealed, we subtly adjust the tagline
   to indicate that the masks have slipped off. */
/* After the masks flip, we subtly shift the colour and increase
   letter‑spacing to signal a state change without jarring the user. */
.tagline.revealed {
  color: var(--accent-hover);
  font-size: 1.8rem;
  letter-spacing: 0.5px;
}

/* Message area beneath the responses */
.message-div {
  margin-top: 2rem;
  text-align: center;
  max-width: 600px;
  margin-left: auto;
  margin-right: auto;
}
.message-div p {
  font-size: 1.25rem;
  margin-bottom: 1rem;
  line-height: 1.6;
}

/* When the question text needs to convey curiosity or tension, we apply
   the .curious class to change its colour and slightly decrease the
   size. */
.message-div p.curious {
  color: var(--alert);
  font-size: 1.15rem;
  font-style: italic;
  margin-top: -0.25rem;
  margin-bottom: 1.5rem;
}
.message-div button {
  background: var(--accent);
  color: var(--background);
  border: none;
  padding: 0.8rem 1.6rem;
  border-radius: var(--border-radius);
  font-size: 1.05rem;
  cursor: pointer;
  font-weight: 600;
  transition: background 0.2s ease, color 0.2s ease;
  /* If a pulse animation is applied via JavaScript, it will gently
     enlarge and shrink the button to draw the user’s attention.  The
     animation property is left undefined here; it is attached via
     the .pulse-button class below. */
}
.message-div button:hover {
  background: var(--accent-hover);
  color: var(--background);
}

/* Pulsing call-to-action.  When the .pulse-button class is added to
   a button, it will gently grow and shrink to signal that it’s ready
   for user interaction.  This subtle animation invites curiosity
   without resorting to gaudy effects. */
@keyframes pulse {
  0%, 100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
}
.pulse-button {
  animation: pulse 1.6s ease-in-out infinite;
}

/* Responses grid */
.responses {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin-top: 2rem;
}

.response-card {
  /* Let each response card size itself to its content rather than
     distributing height evenly.  The width is kept at 100% so it
     spans the container, and perspective enables the 3D flip effect. */
  width: 100%;
  perspective: 1000px;
  margin-bottom: 1rem;
}

.card-inner {
  /* Let the height of the card be determined by its contents.  We used to
     enforce a minimum height (220px) which created excess empty space
     when some responses were only a few sentences long.  By removing
     min-height, each card will shrink or grow to fit its content, and
     both the front and back faces will adapt automatically.  The
     preserve-3d property is still needed for the flip animation. */
  position: relative;
  width: 100%;
  /* We set a modest minimum height to ensure the flip panels have
     enough space for their content.  Without a minimum, the absolute
     positioning of the front/back faces would collapse to zero height.
     120px provides flexibility while avoiding large empty areas. */
  min-height: 120px;
  transform-style: preserve-3d;
  transition: transform var(--transition-duration) ease;
}

.card-inner.flipped {
  transform: rotateY(180deg);
}

.card-face {
  position: absolute;
  width: 100%;
  height: 100%;
  backface-visibility: hidden;
  border-radius: var(--border-radius);
  border: 1px solid var(--accent);
  background: var(--card-background);
  padding: 1rem;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
}

.card-back {
  transform: rotateY(180deg);
}

.card-title {
  font-weight: 600;
  margin-bottom: 0.5rem;
  color: var(--accent);
}

.card-content {
  flex: 1;
}

/* Controls */
.controls {
  margin-top: 2rem;
  text-align: center;
}

.controls button {
  background: var(--accent);
  color: var(--background);
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: var(--border-radius);
  font-size: 1rem;
  cursor: pointer;
  font-weight: 600;
  transition: background 0.2s ease, color 0.2s ease;
}

.controls button:hover {
  background: var(--accent-hover);
  color: var(--background);
}

/* Slide container */
.slide-container {
  margin-top: 2rem;
}

.slide {
  display: none;
  opacity: 0;
  transition: opacity 0.5s ease;
}

.slide.active {
  display: block;
  opacity: 1;
}

.slide h2 {
  font-size: 2rem;
  margin-bottom: 1rem;
  line-height: 1.3;
}

/* Make slide paragraphs larger for readability */
.slide p {
  font-size: 1.15rem;
  line-height: 1.6;
}

/* Resource links */
.resource-list {
  list-style: none;
  padding-left: 0;
}

.resource-list li a {
  color: var(--accent);
  text-decoration: none;
  border-bottom: 1px solid transparent;
  transition: border-color 0.2s ease;
}

.resource-list li a:hover {
  border-color: var(--background);
}

/* Final slide styling */
.final-slide {
  /* Use the dark card background with an accent border to create a
     contemplative closing panel.  This contrasts with the brighter
     responses and highlights the gravity of the final question. */
  background: var(--card-background);
  color: var(--foreground);
  border: 2px solid var(--accent);
  padding: 3rem 1rem;
  border-radius: var(--border-radius);
  max-width: 800px;
  margin: 4rem auto;
  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.6);
  text-align: center;
}

.final-slide h2 {
  /* Enlarge the main question on the final page to emphasise its importance */
  /* Amplify the final question to create a sense of grandeur.  A
     slightly larger font size and tighter spacing focus the user’s
     attention on the core dilemma. */
  font-size: 4.5rem;
  margin-bottom: 1.25rem;
  line-height: 1.1;
  color: var(--accent);
}

.final-slide p {
  font-size: 1.6rem;
  margin-bottom: 1.5rem;
  line-height: 1.4;
}

.final-slide .resource-list li a {
  color: var(--accent);
  border-bottom: 1px solid var(--accent);
}

.final-slide .resource-list li a:hover {
  border-color: var(--accent-hover);
}

/* Style the restart button on the final slide to stand out against the
   bright background.  We invert the typical colour scheme here so it
   doesn’t blend into the panel. */
.final-slide .controls button {
  background: transparent;
  color: var(--accent);
  border: 2px solid var(--accent);
  padding: 0.8rem 1.6rem;
  border-radius: var(--border-radius);
  font-size: 1.1rem;
  cursor: pointer;
  font-weight: 600;
  transition: background 0.2s ease, color 0.2s ease, border-color 0.2s ease;
}
.final-slide .controls button:hover {
  background: var(--accent);
  color: var(--background);
  border-color: var(--accent);
}

/* Final question and tagline text on last slide */
.final-question {
  /* Elevate the question on the final page to the same scale as the slide header */
  /* Mirror the adjustments applied to .final-slide h2.  The question
     should dominate the final page with an imposing size and clear
     spacing. */
  font-size: 4.5rem;
  margin-bottom: 1.25rem;
  line-height: 1.1;
  color: var(--accent);
  font-weight: 700;
  /* Add a soft glow around the letters to amplify the sense of
     significance without overwhelming the dark backdrop. */
  text-shadow: 0 0 20px rgba(100, 255, 218, 0.6);
}
.final-tagline {
  font-size: 1.5rem;
  margin-bottom: 1.2rem;
  line-height: 1.4;
  color: var(--foreground);
}

/* Styling for the learn‑more area on the final page.  The links are
   intentionally understated to keep the focus on the main question. */
.final-links {
  margin-top: 2rem;
}
.final-links .learn-more {
  font-size: 1.2rem;
  margin-bottom: 0.75rem;
  color: var(--foreground);
  font-weight: 600;
}
.final-links .resource-list li a {
  color: var(--accent-hover);
  border-bottom: 1px solid var(--accent-hover);
}
.final-links .resource-list li a:hover {
  color: var(--accent);
  border-color: var(--accent);
}

/* Typing indicator */
.typing {
  font-style: italic;
  color: var(--accent);
}

/* Layered sandwich page for explaining the prompt stack.  We design
   three overlapping cards with increasing z-index so they look like
   slices of a sandwich.  Each card slides up gently when the page
   appears. */
.layer-container {
  position: relative;
  max-width: 700px;
  margin: 3rem auto;
  padding-top: 2rem;
}
.layer-card {
  position: relative;
  background: var(--card-background);
  border: 1px solid var(--accent);
  border-radius: var(--border-radius);
  padding: 1rem 1.5rem;
  margin-bottom: -2rem;
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.5);
  transform: translateY(50px);
  opacity: 0;
  animation: layerIn var(--transition-duration) ease forwards;
}

/* Highlight the collision layer with a red border and text to make the
   dramatic question stand out.  This class is applied to the final
   instruction card in the JavaScript when building the stack. */
.layer-card.conflict {
  /* Make the final layer stand out with a thicker border and a subtle
     red glow on the dark background.  A translucent red backdrop
     differentiates it from the other layers without overpowering the
     page. */
  border-color: var(--alert);
  border-width: 2px;
  background: rgba(255, 107, 107, 0.12);
  box-shadow: 0 0 20px rgba(255, 107, 107, 0.4);
}

/* Colour and scale adjustments specifically for the conflict card’s
   title and body.  We enlarge the typography to convey the weight of
   contradiction and shift the hue towards the alert colour. */
.layer-card.conflict h3,
.layer-card.conflict p {
  color: var(--alert);
}
.layer-card.conflict h3 {
  font-size: 2rem;
  font-weight: 700;
  margin-bottom: 0.75rem;
}
.layer-card.conflict p {
  font-size: 1.4rem;
  line-height: 1.5;
}
.layer-card:nth-child(1) {
  z-index: 3;
  animation-delay: 0.1s;
}
.layer-card:nth-child(2) {
  z-index: 2;
  animation-delay: 0.3s;
}
.layer-card:nth-child(3) {
  z-index: 1;
  animation-delay: 0.5s;
}
.layer-title {
  font-size: 1.8rem;
  color: var(--accent);
  margin-bottom: 0.5rem;
  font-weight: 600;
}
.layer-content {
  font-size: 1.15rem;
  line-height: 1.5;
  color: var(--foreground);
}
.layer-conflict {
  text-align: center;
  margin-top: 4rem;
  font-size: 1.3rem;
  max-width: 700px;
  margin-left: auto;
  margin-right: auto;
  color: var(--foreground);
}
.layer-controls {
  margin-top: 2rem;
  text-align: center;
}
.layer-controls button {
  background: transparent;
  color: var(--accent);
  border: 2px solid var(--accent);
  padding: 0.75rem 1.6rem;
  border-radius: var(--border-radius);
  font-size: 1.1rem;
  cursor: pointer;
  font-weight: 600;
  transition: background 0.2s ease, color 0.2s ease;
}
.layer-controls button:hover {
  background: var(--accent);
  color: var(--background);
}
@keyframes layerIn {
  to {
    transform: translateY(0);
    opacity: 1;
  }
}